/**
 */
package rebel_chatlogs.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import rebel_chatlogs.Message;
import rebel_chatlogs.Rebel_chatlogsPackage;
import rebel_chatlogs.User;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>User</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link rebel_chatlogs.impl.UserImpl#getSend <em>Send</em>}</li>
 *   <li>{@link rebel_chatlogs.impl.UserImpl#getReceive <em>Receive</em>}</li>
 *   <li>{@link rebel_chatlogs.impl.UserImpl#getName <em>Name</em>}</li>
 *   <li>{@link rebel_chatlogs.impl.UserImpl#getCellPhone <em>Cell Phone</em>}</li>
 *   <li>{@link rebel_chatlogs.impl.UserImpl#getEmail <em>Email</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UserImpl extends MinimalEObjectImpl.Container implements User {
	/**
	 * The cached value of the '{@link #getSend() <em>Send</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSend()
	 * @generated
	 * @ordered
	 */
	protected EList<Message> send;

	/**
	 * The cached value of the '{@link #getReceive() <em>Receive</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getReceive()
	 * @generated
	 * @ordered
	 */
	protected EList<Message> receive;

	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The default value of the '{@link #getCellPhone() <em>Cell Phone</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getCellPhone()
	 * @generated
	 * @ordered
	 */
	protected static final int CELL_PHONE_EDEFAULT = 0;

	/**
	 * The cached value of the '{@link #getCellPhone() <em>Cell Phone</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getCellPhone()
	 * @generated
	 * @ordered
	 */
	protected int cellPhone = CELL_PHONE_EDEFAULT;

	/**
	 * The default value of the '{@link #getEmail() <em>Email</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getEmail()
	 * @generated
	 * @ordered
	 */
	protected static final String EMAIL_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getEmail() <em>Email</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getEmail()
	 * @generated
	 * @ordered
	 */
	protected String email = EMAIL_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return Rebel_chatlogsPackage.Literals.USER;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Message> getSend() {
		if (send == null) {
			send = new EObjectWithInverseResolvingEList<Message>(Message.class, this, Rebel_chatlogsPackage.USER__SEND,
					Rebel_chatlogsPackage.MESSAGE__SEND_BY);
		}
		return send;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Message> getReceive() {
		if (receive == null) {
			receive = new EObjectWithInverseResolvingEList<Message>(Message.class, this,
					Rebel_chatlogsPackage.USER__RECEIVE, Rebel_chatlogsPackage.MESSAGE__RECEIVED_BY);
		}
		return receive;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, Rebel_chatlogsPackage.USER__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public int getCellPhone() {
		return cellPhone;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setCellPhone(int newCellPhone) {
		int oldCellPhone = cellPhone;
		cellPhone = newCellPhone;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, Rebel_chatlogsPackage.USER__CELL_PHONE, oldCellPhone,
					cellPhone));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getEmail() {
		return email;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setEmail(String newEmail) {
		String oldEmail = email;
		email = newEmail;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, Rebel_chatlogsPackage.USER__EMAIL, oldEmail, email));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case Rebel_chatlogsPackage.USER__SEND:
			return ((InternalEList<InternalEObject>) (InternalEList<?>) getSend()).basicAdd(otherEnd, msgs);
		case Rebel_chatlogsPackage.USER__RECEIVE:
			return ((InternalEList<InternalEObject>) (InternalEList<?>) getReceive()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case Rebel_chatlogsPackage.USER__SEND:
			return ((InternalEList<?>) getSend()).basicRemove(otherEnd, msgs);
		case Rebel_chatlogsPackage.USER__RECEIVE:
			return ((InternalEList<?>) getReceive()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case Rebel_chatlogsPackage.USER__SEND:
			return getSend();
		case Rebel_chatlogsPackage.USER__RECEIVE:
			return getReceive();
		case Rebel_chatlogsPackage.USER__NAME:
			return getName();
		case Rebel_chatlogsPackage.USER__CELL_PHONE:
			return getCellPhone();
		case Rebel_chatlogsPackage.USER__EMAIL:
			return getEmail();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case Rebel_chatlogsPackage.USER__SEND:
			getSend().clear();
			getSend().addAll((Collection<? extends Message>) newValue);
			return;
		case Rebel_chatlogsPackage.USER__RECEIVE:
			getReceive().clear();
			getReceive().addAll((Collection<? extends Message>) newValue);
			return;
		case Rebel_chatlogsPackage.USER__NAME:
			setName((String) newValue);
			return;
		case Rebel_chatlogsPackage.USER__CELL_PHONE:
			setCellPhone((Integer) newValue);
			return;
		case Rebel_chatlogsPackage.USER__EMAIL:
			setEmail((String) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case Rebel_chatlogsPackage.USER__SEND:
			getSend().clear();
			return;
		case Rebel_chatlogsPackage.USER__RECEIVE:
			getReceive().clear();
			return;
		case Rebel_chatlogsPackage.USER__NAME:
			setName(NAME_EDEFAULT);
			return;
		case Rebel_chatlogsPackage.USER__CELL_PHONE:
			setCellPhone(CELL_PHONE_EDEFAULT);
			return;
		case Rebel_chatlogsPackage.USER__EMAIL:
			setEmail(EMAIL_EDEFAULT);
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case Rebel_chatlogsPackage.USER__SEND:
			return send != null && !send.isEmpty();
		case Rebel_chatlogsPackage.USER__RECEIVE:
			return receive != null && !receive.isEmpty();
		case Rebel_chatlogsPackage.USER__NAME:
			return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
		case Rebel_chatlogsPackage.USER__CELL_PHONE:
			return cellPhone != CELL_PHONE_EDEFAULT;
		case Rebel_chatlogsPackage.USER__EMAIL:
			return EMAIL_EDEFAULT == null ? email != null : !EMAIL_EDEFAULT.equals(email);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy())
			return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(", cellPhone: ");
		result.append(cellPhone);
		result.append(", email: ");
		result.append(email);
		result.append(')');
		return result.toString();
	}

} //UserImpl
