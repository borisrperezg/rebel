package uniandes.rebel.chatlogs;

import java.util.ArrayList;
import java.util.Calendar;

import rebel_chatlogs.Message;
import rebel_github.Person;
import uniandes.rebel.github.GHUtil;

public class CEPopulation {

private CEModel ceModel;
	
	public CEPopulation() {
		ceModel = new CEModel();
	}
	
	/**
	 * Executed by revelapi
	 * @param project
	 * @param commits
	 * @throws Exception
	 */
	public void execute(String project, String chatEmailFileName) throws Exception {		
		
		// Temporal loaded route from web page
		String contentLog =  CEUtil.readFile("/Users/borisperezg/temporaluploadfolder/"+chatEmailFileName);
		
		Message msg = 
			
	}
	
	/**
	 * Extract specific information within the commit
	 * @param listOfCommits
	 */
	public void matchingPatterns(String project, String contentLog) throws Exception {
		
		Message msg = null;
		
		String from = CEUtil.getValueMatch("From:\\s([?|\\w|\\d|=|-]+\\s<[\\w|\\d|@|.]+>)", contentLog);
		
		
		// Id
		String id = GHUtil.getValueMatch("commit\\s+([\\d|\\w|<|>|@|\\.]+(?:(?!\\RAuthor:).*\\R)*)", s);
		
		ghModel.createModel(project, id);
		
		msg = ghModel.createMessage();
		msg.setId(id);				
		
		// Author
		String person = GHUtil.getValueMatch("Author:\\s+([\\d|\\w|<|>|\\s|\\.|\\@]+)\\R(?:(?!Date:).*\\R)*", s);
		Person p = ghModel.createPerson();
		String[] valuesPerson = GHUtil.getValuesMatch("([\\w]+)\\h+<([\\w|\\d|-|_|@|.]+)>", person);
		p.setEmail(valuesPerson[0]);
		p.setName(valuesPerson[1]);
		msg.setPerson(p);
		ghModel.storePerson(p);
		
		// Date
		String[] date = GHUtil.getValuesMatch("(?:[\\w]{3})\\h([\\w]{3})\\h([\\d]{1,2})\\h([\\d]{1,2}):([\\d]{1,2}):(?:[\\d]{1,2})\\h([\\d]{4})", s);
		Calendar c = Calendar.getInstance();
		String month = date[0];
		String day = date[1];
		String hour = date[2];
		String minute = date[3];
		String year = date[4];				
		c.set(Integer.parseInt(year), GHUtil.monthNumber(month), Integer.parseInt(day), Integer.parseInt(hour), Integer.parseInt(minute));
		msg.setDate(c.getTime());
		
		// Type, scope, subject 
		String[] infoCommit = GHUtil.getValuesMatch("(feat|fix|refactor|docs|models|style)<([\\w]+)>:\\s+([\\w|\\h]+)[\\r|\\n|\\s]*(.*)", s);
		msg.setType(GHUtil.getMessageType(infoCommit[0]));
		msg.setScope(infoCommit[1]);
		msg.setSubject(infoCommit[2]);
		msg.setBody(infoCommit[3]);
		
		ghModel.storeMessage(msg);
		ghModel.storeModel(project, id, "github");
			
		
	}
	
}
