package uniandes.rebel.github;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import rebel_github.Message;
import rebel_github.Person;

public class PopulationGH {
	
	/**
	 * Executed by revelapi
	 * @param project
	 * @param commits
	 * @throws Exception
	 */
	public void execute(String project, String commitsFileName) throws Exception {		
		
		// Temporal loaded route from web page
		String lines =  Util.readFile("/Users/borisrainieroperezgutierrez/tempmodel/"+commitsFileName);
		
		
		ArrayList<String> listOfCommits = extractCommitBlock(lines);
		matchingPatterns(listOfCommits, project, commitsFileName);		
	}
	
	/**
	 * Get blocks of commits from the file of commits
	 * @param text
	 * @return
	 */
	public ArrayList<String> extractCommitBlock(String text) {
		ArrayList<String> listOfCommits = new ArrayList<String>();
		
		String pattern = "commit [0-9a-f]+\\R(?:(?!\\Rcommit ).*\\R)*";

		Pattern r = Pattern.compile(pattern);

		// Now create matcher object.
		Matcher m = r.matcher(text);
		while(m.find()) {
			listOfCommits.add(m.group());		    
		}
		
		return listOfCommits;
	}
	
	/**
	 * Extract specific information within the commit
	 * @param listOfCommits
	 */
	public void matchingPatterns(ArrayList<String> listOfCommits, String project, String commitsFileName) throws Exception {
		
		if(listOfCommits!=null && listOfCommits.size()>0) {
		
			GitHubModel.getInstance().createModel(project, commitsFileName);
			
			Message msg = null;
			
			for(String s : listOfCommits) {
				msg = GitHubModel.getInstance().createMessage();
				
				// Id
				String id = Util.getValueMatch("commit\\s+([\\d|\\w|<|>|@|\\.]+(?:(?!\\RAuthor:).*\\R)*)", s);
				msg.setId(id);				
				
				// Author
				String person = Util.getValueMatch("Author:\\s+([\\d|\\w|<|>|\\s|\\.|\\@]+)\\R(?:(?!Date:).*\\R)*", s);
				Person p = GitHubModel.getInstance().createPerson();
				String[] valuesPerson = Util.getValuesMatch("([\\w]+)\\h+<([\\w|\\d|-|_|@|.]+)>", person);
				p.setEmail(valuesPerson[0]);
				p.setName(valuesPerson[1]);
				msg.setPerson(p);
				GitHubModel.getInstance().storePerson(p);
				
				// Date
				String[] date = Util.getValuesMatch("(?:[\\w]{3})\\h([\\w]{3})\\h([\\d]{1,2})\\h([\\d]{1,2}):([\\d]{1,2}):(?:[\\d]{1,2})\\h([\\d]{4})", s);
				Calendar c = Calendar.getInstance();
				String month = date[0];
				String day = date[1];
				String hour = date[2];
				String minute = date[3];
				String year = date[4];				
				c.set(Integer.parseInt(year), Util.monthNumber(month), Integer.parseInt(day), Integer.parseInt(hour), Integer.parseInt(minute));
				msg.setDate(c.getTime());
				
				// Type, scope, subject 
				String[] infoCommit = Util.getValuesMatch("(feat|fix|refactor|docs|models|style)<([\\w]+)>:\\s+([\\w|\\h]+)[\\r|\\n|\\s]*(.*)", s);
				msg.setType(Util.getMessageType(infoCommit[0]));
				msg.setScope(infoCommit[1]);
				msg.setSubject(infoCommit[2]);
				msg.setBody(infoCommit[3]);
				
				GitHubModel.getInstance().storeMessage(msg);				
			}
			GitHubModel.getInstance().storeModel(project, commitsFileName, "github");
		}
	}
	
	

}
